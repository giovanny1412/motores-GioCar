{"entries":[{"timestamp":1727128817752,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"2~.rXKw0zKF[boUvr``p\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\" id=\"[NCS7}oB5A[5$NmvrDqY\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace motores {\" line1=\"\" line2=\"    // Enumeración para las direcciones del motor\" line3=\"    enum MotorDirection {\" line4=\"        Adelante,\" line5=\"        Atras\" line6=\"    }\" line7=\"\" line8=\"    // Definición del bloque para activar el motor 1\" line9=\"    //% blockId=activarMotor1 block=&quot;activar motor 1 en dirección %direccion|con velocidad %velocidad&quot;\" line10=\"    export function activarMotor1(direccion: MotorDirection, velocidad: number): void {\" line11=\"        let pinMotor1A = DigitalPin.P0; // Pin para el motor 1\" line12=\"        let pinMotor1B = DigitalPin.P1; // Pin para el motor 1\" line13=\"\" line14=\"        // Configurar pines como salidas\" line15=\"        pins.digitalWritePin(pinMotor1A, 0);\" line16=\"        pins.digitalWritePin(pinMotor1B, 0);\" line17=\"\" line18=\"        // Controlar motor 1\" line19=\"        if (direccion == MotorDirection.Adelante) {\" line20=\"            pins.digitalWritePin(pinMotor1A, 1);\" line21=\"            pins.digitalWritePin(pinMotor1B, 0);\" line22=\"        } else if (direccion == MotorDirection.Atras) {\" line23=\"            pins.digitalWritePin(pinMotor1A, 0);\" line24=\"            pins.digitalWritePin(pinMotor1B, 1);\" line25=\"        }\" line26=\"\" line27=\"        // Controlar velocidad (PWM)\" line28=\"        controlMotorVelocidad(pinMotor1A, velocidad);\" line29=\"    }\" line30=\"\" line31=\"    // Definición del bloque para activar el motor 2\" line32=\"    //% blockId=activarMotor2 block=&quot;activar motor 2 en dirección %direccion|con velocidad %velocidad&quot;\" line33=\"    export function activarMotor2(direccion: MotorDirection, velocidad: number): void {\" line34=\"        let pinMotor2A = DigitalPin.P2; // Pin para el motor 2\" line35=\"        let pinMotor2B = DigitalPin.P3; // Pin para el motor 2\" line36=\"\" line37=\"        // Configurar pines como salidas\" line38=\"        pins.digitalWritePin(pinMotor2A, 0);\" line39=\"        pins.digitalWritePin(pinMotor2B, 0);\" line40=\"\" line41=\"        // Controlar motor 2\" line42=\"        if (direccion == MotorDirection.Adelante) {\" line43=\"            pins.digitalWritePin(pinMotor2A, 1);\" line44=\"            pins.digitalWritePin(pinMotor2B, 0);\" line45=\"        } else if (direccion == MotorDirection.Atras) {\" line46=\"            pins.digitalWritePin(pinMotor2A, 0);\" line47=\"            pins.digitalWritePin(pinMotor2B, 1);\" line48=\"        }\" line49=\"\" line50=\"        // Controlar velocidad (PWM)\" line51=\"        controlMotorVelocidad(pinMotor2A, velocidad);\" line52=\"    }\" line53=\"\" line54=\"    // Función para controlar la velocidad del motor usando PWM\" line55=\"    function controlMotorVelocidad(pin: DigitalPin, velocidad: number): void {\" line56=\"        let pwmValue = Math.map(velocidad, 0, 100, 0, 1023); // Mapea la velocidad de 0-100 a PWM de 0-1023\" line57=\"        pins.analogWritePin(pin, pwmValue); // Escribe el valor PWM al pin\" line58=\"    }\" line59=\"}\" numlines=\"60\"></mutation></block></statement></block>"],[1,"://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":3232,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"namespace motores {\n\n    // Enumeración para las direcciones del motor\n    enum MotorDirection {\n        Adelante,\n        Atras\n    }\n\n    // Definición del bloque para activar el motor 1\n    //% blockId=activarMotor1 block=\"activar motor 1 en dirección %direccion|con velocidad %velocidad\"\n    export function activarMotor1(direccion: MotorDirection, velocidad: number): void {\n        let pinMotor1A = DigitalPin.P0; // Pin para el motor 1\n        let pinMotor1B = DigitalPin.P1; // Pin para el motor 1\n\n        // Configurar pines como salidas\n        pins.digitalWritePin(pinMotor1A, 0);\n        pins.digitalWritePin(pinMotor1B, 0);\n\n        // Controlar motor 1\n        if (direccion == MotorDirection.Adelante) {\n            pins.digitalWritePin(pinMotor1A, 1);\n            pins.digitalWritePin(pinMotor1B, 0);\n        } else if (direccion == MotorDirection.Atras) {\n            pins.digitalWritePin(pinMotor1A, 0);\n            pins.digitalWritePin(pinMotor1B, 1);\n        }\n\n        // Controlar velocidad (PWM)\n        controlMotorVelocidad(pinMotor1A, velocidad);\n    }\n\n    // Definición del bloque para activar el motor 2\n    //% blockId=activarMotor2 block=\"activar motor 2 en dirección %direccion|con velocidad %velocidad\"\n    export function activarMotor2(direccion: MotorDirection, velocidad: number): void {\n        let pinMotor2A = DigitalPin.P2; // Pin para el motor 2\n        let pinMotor2B = DigitalPin.P3; // Pin para el motor 2\n\n        // Configurar pines como salidas\n        pins.digitalWritePin(pinMotor2A, 0);\n        pins.digitalWritePin(pinMotor2B, 0);\n\n        // Controlar motor 2\n        if (direccion == MotorDirection.Adelante) {\n            pins.digitalWritePin(pinMotor2A, 1);\n            pins.digitalWritePin(pinMotor2B, 0);\n        } else if (direccion == MotorDirection.Atras) {\n            pins.digitalWritePin(pinMotor2A, 0);\n            pins.digitalWritePin(pinMotor2B, 1);\n        }\n\n        // Controlar velocidad (PWM)\n        controlMotorVelocidad(pinMotor2A, velocidad);\n    }\n\n    // Función para controlar la velocidad del motor usando PWM\n    function controlMotorVelocidad(pin: DigitalPin, velocidad: number): void {\n        let pwmValue = Math.map(velocidad, 0, 100, 0, 1023); // Mapea la velocidad de 0-100 a PWM de 0-1023\n        pins.analogWritePin(pin, pwmValue); // Escribe el valor PWM al pin\n    }\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":2360,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":238,"start2":238,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1727128817751,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"motores github\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1727128877953}